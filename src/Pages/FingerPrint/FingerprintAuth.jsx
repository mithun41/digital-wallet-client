import React, { useState } from "react";
import axios from "axios";
import {
  startAuthentication,
  startRegistration,
} from "@simplewebauthn/browser";
// üîë FIX: useSelector-‡¶è‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶á‡¶Æ‡¶™‡ßã‡¶∞‡ßç‡¶ü
import { useSelector } from "react-redux";

const API_BASE = "http://localhost:5000/api/fingerprint"; // backend URL

// üîë ‡¶¨‡¶æ‡¶á‡¶®‡¶æ‡¶∞‡¶ø ‡¶°‡ßá‡¶ü‡¶æ‡¶ó‡ßÅ‡¶≤‡¶ø‡¶ï‡ßá Base64URL ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç-‡¶è ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ Helper Function
// ‡¶è‡¶ü‡¶ø ArrayBuffer ‡¶°‡ßá‡¶ü‡¶æ‡¶ó‡ßÅ‡¶≤‡¶ø‡¶ï‡ßá JSON-‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶ß‡ßç‡¶Ø‡¶Æ‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶â‡¶™‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßá ‡¶§‡ßã‡¶≤‡ßá‡•§
const cleanAttestationResponse = (attResp) => {
  // ArrayBuffer ‡¶°‡ßá‡¶ü‡¶æ‡¶ó‡ßÅ‡¶≤‡¶ø‡¶ï‡ßá Base64URL ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç-‡¶è ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶≤‡¶ú‡¶ø‡¶ï
  const encoder = (data) =>
    data instanceof ArrayBuffer
      ? btoa(String.fromCharCode(...new Uint8Array(data)))
          .replace(/\+/g, "-")
          .replace(/\//g, "_")
          .replace(/=/g, "")
      : data;

  // attResp ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡¶æ‡¶á‡¶®‡¶æ‡¶∞‡¶ø ‡¶™‡ßç‡¶∞‡¶™‡¶æ‡¶∞‡ßç‡¶ü‡¶ø‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç-‡¶è ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞ ‡¶ï‡¶∞‡¶æ
  return {
    ...attResp,
    id: encoder(attResp.id),
    rawId: encoder(attResp.rawId),
    response: {
      ...attResp.response,
      attestationObject: encoder(attResp.response.attestationObject),
      clientDataJSON: encoder(attResp.response.clientDataJSON),
    },
  };
};

const FingerprintAuth = ({ mode = "login", phone }) => {
  const [message, setMessage] = useState("");
  const [loading, setLoading] = useState(false);

  // üîë FIX: useSelector-‡¶è‡¶∞ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
  const { token: reduxToken } = useSelector((state) => state.auth);
  const token = reduxToken || localStorage.getItem("token");

  // ------------------- REGISTER -------------------
  const handleRegister = async () => {
    try {
      setLoading(true);
      setMessage("Initializing fingerprint registration...");

      const { data: options } = await axios.post(
        `${API_BASE}/register/start`,
        {},
        { headers: { Authorization: `Bearer ${token}` } }
      );

      // Step 2: Browser performs WebAuthn registration
      const attResp = await startRegistration(options);

      // üîë ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®: ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶Ü‡¶ó‡ßá ArrayBuffer ‡¶ï‡ßá ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç-‡¶è ‡¶∞‡ßÇ‡¶™‡¶æ‡¶®‡ßç‡¶§‡¶∞
      const cleanedAttResp = cleanAttestationResponse(attResp);

      // Step 3: Verify registration on server (Line 39/40)
      await axios.post(`${API_BASE}/register/verify`, cleanedAttResp, {
        headers: { Authorization: `Bearer ${token}` },
      });

      setMessage("‚úÖ Fingerprint registered successfully!");
    } catch (error) {
      console.error("Registration Error:", error);
      setMessage(
        "‚ùå Registration failed: " +
          (error.response?.data?.message || error.message)
      );
    } finally {
      setLoading(false);
    }
  };

  // ------------------- LOGIN -------------------
  const handleLogin = async () => {
    try {
      if (!phone) return setMessage("‚ùå Phone number required for login");
      setLoading(true);
      setMessage("Starting fingerprint login...");

      // Step 1: get login challenge
      const { data: options } = await axios.post(`${API_BASE}/login/start`, {
        phone,
      });

      // Step 2: browser performs WebAuthn authentication
      const asseResp = await startAuthentication(options);

      // üîë ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®: ‡¶≤‡¶ó‡¶á‡¶® Assertion Response-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡¶ì ‡¶è‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º
      const cleanedAsseResp = cleanAttestationResponse(asseResp);

      // Step 3: verify login on server
      const { data } = await axios.post(`${API_BASE}/login/verify`, {
        phone,
        response: cleanedAsseResp, // ‡¶™‡¶∞‡¶ø‡¶∑‡ßç‡¶ï‡¶æ‡¶∞ ‡¶°‡ßá‡¶ü‡¶æ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
      });

      localStorage.setItem("token", data.token);
      setMessage("‚úÖ Fingerprint login successful!");
      window.location.reload();
    } catch (error) {
      console.error(error);
      setMessage(
        "‚ùå Fingerprint login failed: " +
          (error.response?.data?.message || error.message)
      );
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="text-center my-4">
      <h3 className="text-lg font-semibold mb-2">
        {mode === "register"
          ? "Register Fingerprint"
          : "Login with Fingerprint"}
      </h3>

      <button
        onClick={mode === "register" ? handleRegister : handleLogin}
        disabled={loading}
        className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition"
      >
        {loading
          ? "Processing..."
          : mode === "register"
          ? "Register Fingerprint"
          : "Login with Fingerprint"}
      </button>

      {message && <p className="mt-2 text-sm text-gray-700">{message}</p>}
    </div>
  );
};

export default FingerprintAuth;
